Lists, Tables, Displays notes

Vickler says that HTML has 2 types of lists. The list properties of CSS let us plays with those 2(ordered and unordered lists). We can insert images or set things as a market. We can add colors as well within the structure.

CSS Lists
The CSS property list-style-type specifies what type of list items your visitors will see on the web page. We can use more than one type to display bullet points.
see example1.html 

Adding Colors 
Lists can be colored to make them look interesting.  Anything added to the ul or ol will affect the complete list. However, we can add properties to li and that also isolates to individual items.
see example2.html 

CSS Tables
We can also change the look of tables with CSS.
see example3.html 

The Border Property 
We can add borders via CSS to make the table look nice.
see example4.html 

The Width Property
We can also set the width of columns and rows on our tables. This will make it so the presentation is more tight and not huge boxes for small entries.
This can be done with table {width:percent here}

The Height Property 
Similar to width.

Aligning Tables
Aligning is possible with text in td and th.  It can be aligned in the td, the th, and td in a vertical format.

CSS Layout**
To create a clean layout in CSS, we need to use the display property. This property can help in controlling the layout in a better way.  This specifies how an element on our page should be displayed.  Each HTML element carries a default display value based on it's type.  The default value is usually inline or block.  Each block element takes a new line to start. This means block following block will stack on the page (paragraph followed by paragraph, image by image).  The block elements also take up full R-L width of the screen.

The elements <form>,<div>,<header>,<footer>,<p>, <h1> are all block elements.

Block elements always take full width when available.  If we set the width, it will avoid stretching the edges further than we might intend.  After that, we can set up our margins to auto and horizontally center our element in the container.  This inherits whatever width specified and the rest of the space is divied up by margins.

Sometimes we may hit on a stumbling block if the browser window is smaller than our element or page.  After that, it may even throw in a scroll bar.  To prevent this we use **max-width**, allowing us to make a nice fit with smaller screens.
see layout1.html 

margins being set to auto divides it up evenly. The effect is that the element is seemingly centered by the fact that there is remaining space to chop up and share on each side.  Since we didn't explicitly state otherwise, it's assuming that we want an even chop.  Therefore elements are centered.  The visual illusion in this is centering, and in smaller elements we see it better.
Max-width also makes a maximum size, so the smaller element that has it for testing will always resize to within that limit while the other div expands to fill and continue beyond.

Positioning Property 
The property position is for specifying which method of positioning we want an element to have.  This might be relative, sticky, static, fixed, or absolute. Once we decide on it, we can position the HTML element using the right,left,top,bottom properties. They won't work unless we set the position property in code though.

**Static
The first layout position is static. All HTML elements on our website take the static position by default. These elements are the least affected by the left, top, bottom, and right properties.  An HTML element with the static option is not positioned specially.  They position by page flow.  This means essentially that the position isn't tied to any specific factor and they may move between browsers, sizes, and user's setups.

**Relative 
The second layout position is relative. It adjusts the HTML elements relative to the normal position to an HTML element. Setting something to relative and giving it properties will shift it away from it's normal position.
see relative.html 

**Fixed 
The third layout position is fixed. This takes an HTML element and gives it a position. It should always be positioned with regard relative to the viewpoint (also called viewport, this is where we see things displayed.Usually this has to do with mobile and page sizing relative to that.)
